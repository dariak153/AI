#!/usr/bin/env python

"""code template"""

from pgmpy.models import BayesianModel
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination
from itertools import product
import numpy as np

def main():
    # Create the model with edges specified as tuples (parent, child)
    dentist_model = BayesianModel([('Cavity', 'Toothache'),
                                   ('Cavity', 'Catch')])
    # Create tabular CPDs, values has to be 2-D array
    cpd_cav = TabularCPD('Cavity', 2, [[0.2], [0.8]], state_names={'Cavity': ['True', 'False']})
    cpd_too = TabularCPD('Toothache', 2, [[0.6, 0.1],
                                          [0.4, 0.9]],
                         evidence=['Cavity'], evidence_card=[2], state_names={'Cavity': ['True', 'False'], 'Toothache': ['True', 'False']})
    cpd_cat = TabularCPD('Catch', 2, [[0.9, 0.2],
                                      [0.1, 0.8]],
                         evidence=['Cavity'], evidence_card=[2], state_names={'Catch': ['True', 'False'], 'Cavity': ['True', 'False']})
    # Add CPDs to model
    dentist_model.add_cpds(cpd_cav, cpd_too, cpd_cat)

    print('Check model :', dentist_model.check_model())

    print('Independencies:\n', dentist_model.get_independencies())

    # Initialize inference algorithm
    dentist_infer = VariableElimination(dentist_model)

    # Some example queries
    q = dentist_infer.query(['Toothache'])
    print('P(Toothache) =\n', q)

    q = dentist_infer.query(['Cavity'])
    print('P(Cavity) =\n', q)

    q = dentist_infer.query(['Toothache'], evidence={'Cavity': 'True'})
    print('P(Toothache | cavity) =\n', q)

    q = dentist_infer.query(['Toothache'], evidence={'Cavity': 'False'})
    print('P(Toothache | ~cavity) =\n', q)

    # Zadanie 3

    # 1. Oblicz P(Cavity | toothache, ~catch)
    q = dentist_infer.query(variables=['Cavity'], evidence={'Toothache': 'True', 'Catch': 'False'})
    print('P(Cavity | Toothache=true, Catch=false) =\n', q)

    # 2. Oblicz P(Cavity | Toothache, Catch)
    q = dentist_infer.query(variables=['Cavity'], evidence={'Toothache': 'True', 'Catch': 'True'})
    print('P(Cavity | Toothache=true, Catch=true) =\n', q)

    # Additional task - compute all combinations of evidence
    a = [0, 1]  # False, True
    b = [0, 1]  # False, True
    M = np.zeros((2, 2, 2))
    for i in list(product(a, b)):
        q = dentist_infer.query(['Cavity'], evidence={'Toothache': i[0], 'Catch': i[1]})
        M[0, i[0], i[1]] = q.values[0]
        M[1, i[0], i[1]] = q.values[1]

    print("Computed probabilities for all combinations of evidence:")
    print(M)


if __name__ == '__main__':
    main()
