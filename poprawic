from pgmpy.models import FactorGraph
from pgmpy.factors.discrete import DiscreteFactor
from pgmpy.inference import BeliefPropagation

def create_factor_graph(t=5):
    G = FactorGraph()

    # Initial rain factor
    factor_r_0 = DiscreteFactor(['Rain_0'], [2], [0.6, 0.4])
    G.add_nodes_from(['Rain_0'])
    G.add_factors(factor_r_0)

    # Transition and sensor model factors
    for i in range(t):
        rain_i = 'Rain_' + str(i)
        rain_i_plus_1 = 'Rain_' + str(i + 1)
        umbrella_i_plus_1 = 'Umbrella_' + str(i + 1)

        if i < t - 1:
            G.add_nodes_from([rain_i_plus_1])

        G.add_nodes_from([umbrella_i_plus_1])

        factor_p = DiscreteFactor([rain_i, rain_i_plus_1], [2, 2], [[0.7, 0.3], [0.3, 0.7]])
        factor_s = DiscreteFactor([rain_i_plus_1, umbrella_i_plus_1], [2, 2], [[0.9, 0.1], [0.2, 0.8]])

        G.add_factors(factor_p, factor_s)
        G.add_edges_from([(rain_i, factor_p), (rain_i_plus_1, factor_p), (rain_i_plus_1, factor_s), (umbrella_i_plus_1, factor_s)])

    return G

def predict_with_factor_graph(observations, t=5):
    G = create_factor_graph(t)
    inference = BeliefPropagation(G)

    # Set evidence for umbrella observations
    evidence = {'Umbrella_' + str(i + 1): int(obs) for i, obs in enumerate(observations['Umbrella_t'])}
    rain_probabilities = []

    for i in range(t):
        rain_i = 'Rain_' + str(i + 1)
        query_result = inference.query(variables=[rain_i], evidence=evidence)
        rain_probabilities.append(query_result.values)
        print(f"Probability of Rain {rain_i}: {query_result.values}")

    return rain_probabilities

if __name__ == '__main__':
    observations = {'Umbrella_t': [True, True, False, True, True]}
    predict_with_factor_graph(observations)
