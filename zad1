from pgmpy.inference import BeliefPropagation
from pgmpy.models import FactorGraph
from pgmpy.factors.discrete import DiscreteFactor

# Maksymalna liczba dni
t = 5

# Węzły dla zmiennych
nodes = []
nodes.extend(['Rain_' + str(i + 1) for i in range(-1, t)])
nodes.extend(['Umbrella_' + str(i + 1) for i in range(t)])

# Czynnik dla rozkładu początkowego
factor_r_0 = DiscreteFactor(['Rain_0'], [2], [0.6, 0.4])

# Czynniki przejścia
factors_p = [DiscreteFactor(['Rain_' + str(i), 'Rain_' + str(i + 1)],
                           [2, 2],
                           [[0.7, 0.3],
                            [0.3, 0.7]]) for i in range(t)]

# Czynniki sensorów
factors_s = [DiscreteFactor(['Rain_' + str(i + 1), 'Umbrella_' + str(i + 1)],
                           [2, 2],
                           [[0.9, 0.1],
                            [0.2, 0.8]]) for i in range(t)]

# Krawędzie między zmiennymi a czynnikami
edges = [('Rain_0', factor_r_0)]
edges.extend([('Rain_' + str(i + 1), factors_s[i]) for i in range(t)])
edges.extend([('Umbrella_' + str(i + 1), factors_s[i]) for i in range(t)])
edges.extend([('Rain_' + str(i), factors_p[i]) for i in range(t - 1)])
edges.extend([('Rain_' + str(i + 1), factors_p[i]) for i in range(t - 1)])

# Tworzenie modelu
G = FactorGraph()
G.add_nodes_from(nodes)
G.add_node(factor_r_0)
G.add_nodes_from(factors_p)
G.add_nodes_from(factors_s)
G.add_factors(factor_r_0)
G.add_factors(*factors_p)
G.add_factors(*factors_s)
G.add_edges_from(edges)
print('Check model:', G.check_model())

# Belief Propagation
bp = BeliefPropagation(G)
umbrella_observations = [0, 0, 1, 0, 0]

for i in range(t+1):
    evidence = {'Umbrella_' + str(j + 1): obs for j, obs in enumerate(umbrella_observations[:i + 1])}
    variables = ['Rain_' + str(i)]
    marginals = bp.query(variables=variables, evidence=evidence)
    print(f"Marginal distribution for Rain_{i} on Day {i}:", marginals)

